第三章 分支

1.分支概念
    Git 的分支可谓是难以置信的轻量级，它的新建操作几乎可以在瞬间完成，并且在不同分支间切换起来也差不多一样快。
    在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指
    针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。

    Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次
    提交对象的 master 分支，它在每次提交的时候都会自动向前移动。

    Git 又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针.

    那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 HEAD 的特别指针,是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名。）

2.分支的新建与合并
    1.创建分支
        git branch branch_name
    2.切换分支
        git checkout branch_name
    3.创建并切换分支
        git checkout -b branch_name
    由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件
    写入 41 个字节（外加一个换行符）那么简单，当然也就很快了。

    4.合并分支
        git merge branch_name
        合并时出现了“Fast forward”的提示。由于当前master 分支所在的提交对象是要并入的hotfix 分支的直接上游，Git 只需把master 分支指针直接右移。换句话说，如果
        顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快
        进（Fast forward）。

    5.删除分支
        git branch -d branch_name

    6.非快进合并（Non fast-forward merge）
        前面的合并是快进合并，被合并的分支是基于合并分支的最新一次commit之上进行的新的commit，所以合并只需要把指针往前移动即可。
        非快进合并：被合并的分支和合并分支都有最新的commit，两者仅仅拥有共同的历史祖先ancestor
        非快进合并会综合两个分支的最新commit和共同祖先commit（common ancestor commit）这三个commit，形成一个新的commit
        新形成的commit有两个parent commit，即合并之前两个不同分支的最新commit

    7.合并冲突
        合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）
        git status 会显示冲突的文件列表，任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。

        zhengjuns-MacBook-Pro:ProGit zhengjun$ git checkout -b dev
            Switched to a new branch 'dev'
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git commit -a -m "dev分支编辑README.md"
            [dev 8733cef] dev分支编辑README.md
             1 file changed, 2 insertions(+)
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git checkout master
            Switched to branch 'master'
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git commit -a -m "master分支编辑README.md"
            [master 20e1c38] master分支编辑README.md
             1 file changed, 2 insertions(+)
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git merge dev
            Auto-merging README.md
            CONFLICT (content): Merge conflict in README.md
            Automatic merge failed; fix conflicts and then commit the result.

        此时出现合并冲突，启动冲突编辑工具：
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git mergetool README.md
            Merging:
            README.md

            Normal merge conflict for 'README.md':
              {local}: modified file
              {remote}: modified file
            4 files to edit

        冲突解决之后继续未完成的合并操作：
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git merge --continue
            [master a44a8c8] Merge branch 'dev'
        此时，一次非快进合并才正式完成

3.分支的管理
    1.查看各个分支最后一个提交对象的信息
        git branch -v

        C:\Users\Lenovo\Desktop\GitProjects\ProGit>git branch -v
        * dev    05b7a98 Git Pro chapter03 Branch 2018-1-22 10:24:29
          master a2186ba Pro Git chapter03 Branch 2018-01-22 01:39:45

    2.从该清单中筛选出你已经（或尚未）与当前分支合并的分支
        git branch --merged/no-merged

        C:\Users\Lenovo\Desktop\GitProjects\ProGit>git branch -v --no-merged

        C:\Users\Lenovo\Desktop\GitProjects\ProGit>git branch -v --merged
        * dev    05b7a98 Git Pro chapter03 Branch 2018-1-22 10:24:29
          master a2186ba Pro Git chapter03 Branch 2018-01-22 01:39:45

    3.删除分支
        git branch -d branch_name   删除分支,若该分支中还有未merge的内容则会执行失败
        git branch -D branch_name   强制删除

4.利用分支进行开发的工作流程
    1.长期分支
        你可以同时拥有多个开放的分支，每个分支用于完成特定的任务，随着开发的推进，你可以随时把某个特性分支的成果并到其他分支中.

        仅在master 分支中保留完全稳定的代码，即已经发布或即将发布的代码。与此同时，他们还有一个名为develop 或next
        的平行分支，专门用于后续的开发，或仅用于稳定性测试 — 当然并不是说一定要绝对稳定，不过一旦进入某种稳定状态，便可以把它合并到master 里。这样，在确保这些已完成
        的特性分支（短期分支，比如之前的iss53 分支）能够通过所有测试，并且不会引入更多错误之后，就可以并到主干分支中，等待下一次的发布。

        本质上我们刚才谈论的，是随着提交对象不断右移的指针。稳定分支的指针总是在提交历
        史中落后一大截，而前沿分支总是比较靠前.

        使用多个长期分支的做法并非必需，不过一般来说，对于特大型项目或特复杂的项目，这么做确实更容易管理。

    2.特性分支
        特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。可能你在以前的版本控制系统里从未做过类似这样
        的事情，因为通常创建与合并分支消耗太大。然而在 Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。

5.远程分支
    1.概念
        远程分支（remote branch）是对远程仓库中的分支的索引。它们是一些无法移动的本地
        分支；只有在 Git 进行网络交互时才会更新。远程分支就像是书签，提醒着你上次连接远程
        仓库时上面各分支的位置。
        我们用(远程仓库名)/(分支名) 这样的形式表示远程分支。

    2.推送本地分支
        要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库.
        git push origin serverfix   取出本地的serverfix 分支，推送到远程仓库的 serverfix 分支
        git push origin serverfix:awesomebranch 把本地分支serverfix推送到某个命名不同的远程分支awesomebranch

        协作者再次从服务器上获取数据时，他们将得到一个新的远程分支origin/serverfix，并指向服务器上serverfix 所指向的版本
        git checkout -b serverfix origin/serverfix  协作者在远程仓库serverfix分支的基础上创建自己的serverfix分支

    3.跟踪远程分支
        从远程分支checkout 出来的本地分支，称为跟踪分支(tracking branch)。
        在跟踪分支里输入git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。同样，在这些分支里运行git pull 会获取所有远程
        索引，并把它们的数据都合并到本地分支中来。

        git checkout --track origin/serverfix   1.6.2 以上版本的 Git简化创建跟踪分支

    4.删除远程分支
        用这个非常无厘头的语法来删除：git push [远程名] :[分支名]
        有种方便记忆这条命令的方法：记住我们不久前见过的git push [远程名] [本地分支]:[远程分支] 语法，如果省略[本地分支]，那就等于是在说“在这里提取空白然后
        把它变成[远程分支]”

        git push origin :serverfix  注意冒号前面的空白

6.分支的衍合
    把一个分支中的修改整合到另一个分支的办法有两种：merge 和rebase（译注：rebase 的翻译暂定为“衍合”，大家知道就可以了。）
    1.基本的衍合操作
        git checkout branch_name
        git rebase target_branch_name
        它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支
        experiment）后续的历次提交对象（这里只有一个 C3），生成一系列文件补丁，然后以基
        底分支（也就是主干分支master）最后一个提交对象（C4）为新的出发点，逐个应用之前
        准备好的补丁文件，最后会生成一个新的合并提交对象（C3’），从而改写experiment 的
        提交历史，使它成为master 分支的直接下游.

        虽然最后整合得到的结果没有任何区别，但衍合能产生一个更为整洁的提交历史。如果视察一个衍合过的分支的历史记录，看起来会更清楚：仿佛所有修改都是在一根线
        上先后进行的，尽管实际上它们原本是同时并行发生的。衍合是按照每行的修改次序重演一遍修改，而合并是把最终结果合在一起。

        一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁.
        实际上是把解决分支补丁同最新主干代码之间冲突的责任，化转为由提交补丁的人来解决。

    2.有趣的衍合
        衍合也可以放到其他分支进行，并不一定非得根据分化之前的分支。
        git rebase --onto master server client  这好比在说：“取出client 分支，找出client 分支和server 分支的共同祖先之后的变化，然后把它们在master 上重演一遍”。

    3.衍合的风险
        规则:一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。
        如果你遵循这条金科玉律，就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也
        会嘲笑你，唾弃你。

        在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提
        交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开
        展工作，而稍后你又用git rebase 抛弃这些提交对象，把新的重演后的提交对象发布出去的
        话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交
        历史就会变得一团糟。

        如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交
        对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展
        了后续开发工作的话，就会出现叫人沮丧的麻烦。