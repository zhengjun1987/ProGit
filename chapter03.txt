第三章 分支

1.分支概念
    Git 的分支可谓是难以置信的轻量级，它的新建操作几乎可以在瞬间完成，并且在不同分支间切换起来也差不多一样快。
    在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指
    针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。

    Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次
    提交对象的 master 分支，它在每次提交的时候都会自动向前移动。

    Git 又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针.

    那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 HEAD 的特别指针,是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名。）

2.分支的新建与合并
    1.创建分支
        git branch branch_name
    2.切换分支
        git checkout branch_name
    3.创建并切换分支
        git checkout -b branch_name
    由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件
    写入 41 个字节（外加一个换行符）那么简单，当然也就很快了。

    4.合并分支
        git merge branch_name
        合并时出现了“Fast forward”的提示。由于当前master 分支所在的提交对象是要并入的hotfix 分支的直接上游，Git 只需把master 分支指针直接右移。换句话说，如果
        顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快
        进（Fast forward）。

    5.删除分支
        git branch -d branch_name

    6.非快进合并（Non fast-forward merge）
        前面的合并是快进合并，被合并的分支是基于合并分支的最新一次commit之上进行的新的commit，所以合并只需要把指针往前移动即可。
        非快进合并：被合并的分支和合并分支都有最新的commit，两者仅仅拥有共同的历史祖先ancestor
        非快进合并会综合两个分支的最新commit和共同祖先commit（common ancestor commit）这三个commit，形成一个新的commit
        新形成的commit有两个parent commit，即合并之前两个不同分支的最新commit

    7.合并冲突
        合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）
        git status 会显示冲突的文件列表，任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。

        zhengjuns-MacBook-Pro:ProGit zhengjun$ git checkout -b dev
            Switched to a new branch 'dev'
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git commit -a -m "dev分支编辑README.md"
            [dev 8733cef] dev分支编辑README.md
             1 file changed, 2 insertions(+)
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git checkout master
            Switched to branch 'master'
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git commit -a -m "master分支编辑README.md"
            [master 20e1c38] master分支编辑README.md
             1 file changed, 2 insertions(+)
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git merge dev
            Auto-merging README.md
            CONFLICT (content): Merge conflict in README.md
            Automatic merge failed; fix conflicts and then commit the result.

        此时出现合并冲突，启动冲突编辑工具：
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git mergetool README.md
            Merging:
            README.md

            Normal merge conflict for 'README.md':
              {local}: modified file
              {remote}: modified file
            4 files to edit

        冲突解决之后继续未完成的合并操作：
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git merge --continue
            [master a44a8c8] Merge branch 'dev'
        此时，一次非快进合并才正式完成
