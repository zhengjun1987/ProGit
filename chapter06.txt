第六章 Git工具

1.修订版本（Revision）选择
    1.单个修订版本：可以使用给出的 SHA-1 值来指明一次提交

    2.简短的SHA：能够通过你提供的前几个字符来识别你想要的那次提交，只要你提供的那部分 SHA-1 不短于四个字符，并且没有歧义
        git show sha_1

        zhengjuns-MacBook-Pro:ProGit zhengjun$ git show 24c2
            commit 24c2f5a1679e415b848ea3ef669187abb9f5a332 (gitee/master)
            Author: 郑军 <zhengjun1987@outlook.com>
            Date:   Tue Jan 23 01:45:53 2018 +0800

                Pro Git chapter05 Distributed Git 2018-01-23 01:45:48

            diff --git a/README.md b/README.md
            index 10a0fdb..1e8e78e 100644
            --- a/README.md
            +++ b/README.md
            @@ -4,4 +4,8 @@

             第二章 基本操作

            -第三章 分支
            \ No newline at end of file
            +第三章 分支
            +
            +第四章 Git服务器
            +
            +第五章 分布式Git
            \ No newline at end of file
            diff --git a/chapter05 b/chapter05
            new file mode 100644
            index 0000000..247e761
            --- /dev/null
            +++ b/chapter05
            @@ -0,0 +1,35 @@

        传递--abbrev-commit 给gitlog 命令，输出结果里就会使用简短且唯一的值；它默认使用七个字符来表示，不过必要时
        为了避免 SHA-1 的歧义，会增加字符数:

            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log --oneline --abbrev-commit
                c51c09e (HEAD -> master, origin/master) Pro Git chapter05 Distributed Git 2018-1-23 18:21:51
                4e44e26 Pro Git chapter05 Distributed Git 2018-1-23 18:11:18
                3460906 Pro Git chapter05 Distributed Git 2018-1-23 18:11:18
                837874a Pro Git chapter05 Distributed Git 2018-1-23 18:11:18
                fd27ce2 Pro Git chapter05 Distributed Git 2018-1-23 18:11:18
                e8f2b96 Pro Git chapter05 Distributed Git 2018-1-23 16:49:28
                24c2f5a (gitee/master) Pro Git chapter05 Distributed Git 2018-01-23 01:45:48
                671b0e6 Pro Git chapter04 Git Server 2018-1-22 18:16:50
                7645777 Pro Git chapter03 Branch 2018-1-22 16:38:50
                a2186ba Pro Git chapter03 Branch 2018-01-22 01:39:45
                a44a8c8 Merge branch 'dev'
                20e1c38 master分支编辑README.md
                8733cef dev分支编辑README.md
                50b3f02 Pro Git chapter03 Branch 2018-01-22 00:56:22
                3bd5e45 Pro Git chapter02 Basical Operations 2018-01-21 21:55:31
                e79e83a 更新 README.md
                4ccc2d5 更新 README.md
                a20c641 更新 README.md
                68f785a 更新 README.md
                8fe188d Pro Git chapter02 Basical Operations 2018-01-21 02:31:23
                1d33d24 撤销操作 将文件移回原来位置 2018-01-21 01:30:32
                5e0a1ae 删除.gitignore文件之后提交
                cd7cd77 建立.gitignore文件，忽略相关文件
                7ed76ee Merge branch 'master' of https://github.com/zhengjun1987hz/ProGit
                a7a19be Pro Git chapter02 Basical Operations 2018-01-20 20:28:44
                56e7d03 Initial commit
                645119d Pro Git chapter01&chapter02 basical operations 2018-01-20 19:08:48

    3.关于 SHA-1 的简短说明
        如果你真的向仓库里提交了一个跟之前的某个对象具有相同 SHA-1 值的对象，Git 将会
        发现之前的那个对象已经存在在 Git 数据库中，并认为它已经被写入了。如果什么时候你想
        再次检出那个对象时，你会总是得到先前的那个对象的数据。

    4.分支引用
        指明一次提交的最直接的方法要求有一个指向它的分支引用。这样，你就可以在任何需要
        一个提交对象或者 SHA-1 值的 Git 命令中使用该分支名称了。

        这句话的意思是，分支可以被视为其最新的一次commit的引用,以下两句等价
        git show c51c09e
        git show master

        如果你想知道某个分支指向哪个特定的 SHA，或者想看任何一个例子中被简写的 SHA-1，你可以使用一个叫做rev-parse 的 Git 探测工具
        git rev-parse branch_name

        zhengjuns-MacBook-Pro:ProGit zhengjun$ git rev-parse master
        c51c09ec7ef13f0e1c32174568ec8ae632d2d168
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git rev-parse origin/master
        c51c09ec7ef13f0e1c32174568ec8ae632d2d168
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git rev-parse gitee/master
        24c2f5a1679e415b848ea3ef669187abb9f5a332

    5.引用日志里的简称


