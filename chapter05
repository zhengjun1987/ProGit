第五章 分布式Git

1.分布式工作流程
    在集中式系统上，每个开发者就像是连接在集线器上的节点，彼此的工作方式大体相像。
    在 Git 网络中，每个开发者同时扮演着节点和集线器的角色，这就是说，每一个开发者都可以将自己的代码贡献到另外一个开发者的仓库中，或者建立自己
    的公共仓库，让其他开发者基于自己的工作开始，为自己的仓库贡献代码。

    1.集中式工作流
        集中式工作流程使用的都是单点协作模型
        一个存放代码仓库的中心服务器，可以接受所有开发者提交的代码。
        所有的开发者都是普通的节点，作为中心集线器的消费者，平时的工作就是和中心仓库同步数据
        适合小团队协作开发模式

    2.集成管理员工作流
        Git 允许使用多个远程仓库，开发者便可以建立自己的公共仓库，往里面写数据并共享给他人，而同时又可以从别人的仓库中提取他们的更新过来。
        1. 项目维护者可以推送数据到公共仓库 blessed repository。
        2. 贡献者克隆此仓库，修订或编写新代码。
        3. 贡献者推送数据到自己的公共仓库 developer public。
        4. 贡献者给维护者发送邮件，请求拉取自己的最新修订。
        5. 维护者在自己本地的 integration manger 仓库中，将贡献者的仓库加为远程仓库，
        合并更新并做测试。
        6. 维护者将合并后的更新推送到主仓库 blessed repository。

    3.司令官与副官工作流
        上一种工作流的变体。一般超大型的项目才会用到这样的工作方式，像是拥有数百协作开发者的 Linux 内核项目就是如此。
        各个集成管理员分别负责集成项目中的特定部分，所以称为副官（lieutenant）。
        所有集成管理员头上还有一位负责统筹的总集成管理员，称为司令官（dictator）。司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码
        1. 一般的开发者在自己的特性分支上工作，并不定期地根据主干分支（dictator 上的
        master）衍合。
        2. 副官（lieutenant）将普通开发者的特性分支合并到自己的 master 分支中。
        3. 司令官（dictator）将所有副官的 master 分支并入自己的 master 分支。
        4. 司令官（dictator）将集成后的 master 分支推送到共享仓库 blessed repository 中，
            以便所有其他开发者以此为基础进行衍合。

2.为项目作贡献
    1.提交指南
        1.不要在更新中提交多余的白字符（whitespace）
            在提交之前，先运行git diff --check，会把可能的多余白字符修正列出来。(最新版本是直接删除行末的空白字符)
            在提交之前你就可以看到这类问题，及时解决以免困扰其他开发者。

        2.将每次提交限定于完成一次逻辑功能。并且可能的话，适当地分解为多次小更新，以便每次小型提交都更易于理解
            不要在周末穷追猛打一次性解决五个问题，而最后拖到周一再提交。
            就算是这样也请尽可能利用暂存区域，将之前的改动分解为每次修复一个问题，再分别提交和加注说明。

        3.提交说明的撰写。写得好可以让大家协作起来更轻松。
            最好限制在一行以内，50 个字符以下，简明扼要地描述更新内容，空开一行后，再展
            开详细注解。Git 项目本身需要开发者撰写详尽注解，包括本次修订的因由，以及前后不同
            实现之间的比较，我们也该借鉴这种做法。另外，提交说明应该用祈使现在式语态.

    2.私有的小型团队
        最简单的协作方式之一：先在自己的特性分支中工作一段时间，完成后合并到自
        己的master 分支；然后下载合并origin/master 上的更新（如果有的话），再推回远程服务器。

    3.私有团队间协作
        许多开发小组改用 Git 就是因为它允许多个小组间并行工作，而在稍后恰当时机再行合
        并。通过共享远程分支的方式，无需干扰整体项目代码便可以开展工作，因此使用 Git 的小
        型团队间协作可以变得非常灵活自由

    4.公开的小型项目
        fork 原开源项目--clone属于fork版本的repository--做出自己对源代码的修改--将修改
        通知项目管理员，让他来抓取你的代码。通常我们把这件事叫做 pull request。可
        以直接用 GitHub 等网站提供的 “pull request” 按钮自动发送请求通知；或手工把git
        request-pull 命令输出结果电邮给项目管理员。
        request-pull 命令接受两个参数，第一个是本地特性分支开始前的原始分支，第二个是请
        求对方来抓取的 Git 仓库 URL（译注：即下面myfork 所指的，自己可写的公共仓库）。比
        如现在Jessica 准备要给 John 发一个 pull requst，她之前在自己的特性分支上提交了两次
        更新，并把分支整个推到了服务器上，所以运行该命令会看到

        git request-pull origin/master dev_branch

