第五章 分布式Git

1.分布式工作流程
    在集中式系统上，每个开发者就像是连接在集线器上的节点，彼此的工作方式大体相像。
    在 Git 网络中，每个开发者同时扮演着节点和集线器的角色，这就是说，每一个开发者都可以将自己的代码贡献到另外一个开发者的仓库中，或者建立自己
    的公共仓库，让其他开发者基于自己的工作开始，为自己的仓库贡献代码。

    1.集中式工作流
        集中式工作流程使用的都是单点协作模型
        一个存放代码仓库的中心服务器，可以接受所有开发者提交的代码。
        所有的开发者都是普通的节点，作为中心集线器的消费者，平时的工作就是和中心仓库同步数据
        适合小团队协作开发模式

    2.集成管理员工作流
        Git 允许使用多个远程仓库，开发者便可以建立自己的公共仓库，往里面写数据并共享给他人，而同时又可以从别人的仓库中提取他们的更新过来。
        1. 项目维护者可以推送数据到公共仓库 blessed repository。
        2. 贡献者克隆此仓库，修订或编写新代码。
        3. 贡献者推送数据到自己的公共仓库 developer public。
        4. 贡献者给维护者发送邮件，请求拉取自己的最新修订。
        5. 维护者在自己本地的 integration manger 仓库中，将贡献者的仓库加为远程仓库，
        合并更新并做测试。
        6. 维护者将合并后的更新推送到主仓库 blessed repository。

    3.司令官与副官工作流
        上一种工作流的变体。一般超大型的项目才会用到这样的工作方式，像是拥有数百协作开发者的 Linux 内核项目就是如此。
        各个集成管理员分别负责集成项目中的特定部分，所以称为副官（lieutenant）。
        所有集成管理员头上还有一位负责统筹的总集成管理员，称为司令官（dictator）。司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码
        1. 一般的开发者在自己的特性分支上工作，并不定期地根据主干分支（dictator 上的
        master）衍合。
        2. 副官（lieutenant）将普通开发者的特性分支合并到自己的 master 分支中。
        3. 司令官（dictator）将所有副官的 master 分支并入自己的 master 分支。
        4. 司令官（dictator）将集成后的 master 分支推送到共享仓库 blessed repository 中，
            以便所有其他开发者以此为基础进行衍合。

2.为项目作贡献
