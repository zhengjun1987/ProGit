第二章	Git基础

1.取得项目的 Git 仓库，两种方法：
		1.在项目根目录下运行命令：git init
			回显：
					Initialized empty Git repository in /Users/zhengjun/Desktop/GitProjects/ProGit/.git/
			初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。
			如果当前目录下有几个文件想要纳入版本控制，需要先用git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交
		2.克隆一个Git项目镜像
			克隆仓库的命令格式为git clone [url] [projectDirName] ,项目路径名称可以省略，省略时自动获取Url最后一个单词作为被克隆项目的项目路径名称
			Git 支持许多数据传输协议。之前的例子使用的是git:// 协议，不过你也可以用http(s)://或者user@server:/path.git 表示的 SSH 传输协议

2.记录每次更新到仓库
			工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。
					已跟踪的文件: 本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。
					未跟踪文件: 所有其他文件,它们既没有上次更新时的快照，也不在当前的暂存区域。
			初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改

		1.检查当前文件状态
			git status
			回显：
					On branch master//当前所在分支
					No commits yet//提交信息
					Untracked files:
					  (use "git add <file>..." to include in what will be committed)
						chapter01.txt
					nothing added to commit but untracked files present (use "git add" to track)
					
		2.添加文件到暂存区——（stage操作）
			回显：
					On branch master
					No commits yet
					Changes to be committed:
					  (use "git rm --cached <file>..." to unstage)
						new file:   chapter01.txt
					Untracked files:
					  (use "git add <file>..." to include in what will be committed)
						chapter02.txt

		3.撤回已经add过的文件——（unstage操作）
			git rm --cached chapter01.txt 
			
			git rm --cached fileName和git reset HEAD fileName的区别：
				前者是将文件从整个项目库中删除，该操作经过提交之后会删除所有代码库克隆镜像中的该文件，而仅仅在本地工作区中保留一个untracked版本
				后者是将文件自暂存库中撤回到工作区，操作后再commit的内容就不再包含该文件内的改动，该文件也从staged回退到modified状态
		
		4.忽略某些文件
			忽略对象：无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表（自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等）
			建一个名为.gitignore 的文件，列出要忽略的文件模式
			忽略规则：
					￿ 所有空行或者以注释符号＃ 开头的行都会被 Git 忽略。
					￿ 可以使用标准的 glob 模式匹配。
					￿ 匹配模式最后跟反斜杠（/）说明要忽略的是目录。
					￿ 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
			glob 模式是指 shell 所使用的简化了的正则表达式：
					星号（*）匹配零个或多个任意字符；
					问号（?）只匹配一个任意字符；
					[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个b，要么匹配一个 c）；
					如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9] 表示匹配所有 0 到 9 的数字）。
					/TODO # 仅仅忽略项目根目录下的TODO 文件，不包括subdir/TODO
					build/ # 忽略build/ 目录下的所有文件
					doc/*.txt # 会忽略doc/notes.txt 但不包括doc/server/arch.txt
					
		5.查看已暂存和未暂存的更新
			查看已修改未暂存的文件 
			git diff 此命令比较的是工作目录中当前文件和暂存区域快照之间的差异
			要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用git diff --cached
			
		7.跳过使用暂存区域
			git commit -a -m "message"		自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过git add 步骤
		
		8.移除文件
			从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。
			可以用git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了
			
			创建.gitignore文件，输入内容并提交，push到GitHub上面去
			然后rm .gitignore文件，查询git状态
			回显：
			    zhengjuns-MacBook-Pro:ProGit zhengjun$ git rm .gitignore
               rm '.gitignore'
               zhengjuns-MacBook-Pro:ProGit zhengjun$ git status
               On branch master
               Changes to be committed:
                 (use "git reset HEAD <file>..." to unstage)

                       deleted:    .gitignore

               Untracked files:
                 (use "git add <file>..." to include in what will be committed)

                       .DS_Store
                       .idea/
                       cmake-build-debug/

			可以看到之前的忽略规则都失效了
			现在提交该删除动作，看GitHub上面的.gitignore是否会被删除
			zhengjuns-MacBook-Pro:ProGit zhengjun$ git commit -m "删除.gitignore文件之后提交"
            [master 5e0a1ae] 删除.gitignore文件之后提交
             1 file changed, 4 deletions(-)
             delete mode 100644 .gitignore
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git push https://github.com/zhengjun1987hz/ProGit.git master
            Counting objects: 2, done.
            Delta compression using up to 4 threads.
            Compressing objects: 100% (2/2), done.
            Writing objects: 100% (2/2), 265 bytes | 265.00 KiB/s, done.
            Total 2 (delta 1), reused 0 (delta 0)
            remote: Resolving deltas: 100% (1/1), completed with 1 local object.
            To https://github.com/zhengjun1987hz/ProGit.git
               cd7cd77..5e0a1ae  master -> master

            查看GitHub，该文件已经被删除

        9.删除一个普通文件（git checkout -- README.md）
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git status
            On branch master
            Changes to be committed:
              (use "git reset HEAD <file>..." to unstage)

                    new file:   .gitignore
                    deleted:    README.md

            Changes not staged for commit:
              (use "git add <file>..." to update what will be committed)
              (use "git checkout -- <file>..." to discard changes in working directory)

                    modified:   .gitignore
                    modified:   chapter02.txt

          回撤该删除操作
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git reset HEAD README.md
            Unstaged changes after reset:
            M       .gitignore
            D       README.md
            M       chapter02.txt
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git status
            On branch master
            Changes to be committed:
              (use "git reset HEAD <file>..." to unstage)

                    new file:   .gitignore

            Changes not staged for commit:
              (use "git add/rm <file>..." to update what will be committed)
              (use "git checkout -- <file>..." to discard changes in working directory)

                    modified:   .gitignore
                    deleted:    README.md
                    modified:   chapter02.txt

            zhengjuns-MacBook-Pro:ProGit zhengjun$ git checkout -- README.md
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git status
            On branch master
            Changes to be committed:
              (use "git reset HEAD <file>..." to unstage)

                    new file:   .gitignore

            Changes not staged for commit:
              (use "git add <file>..." to update what will be committed)
              (use "git checkout -- <file>..." to discard changes in working directory)

                    modified:   .gitignore
                    modified:   chapter02.txt


        10.修改文件名/移动文件
            git mv file_from file_to

            zhengjuns-MacBook-Pro:ProGit zhengjun$ git mv chapter01.txt chapter01/chapter1.txt
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git status
            On branch master
            Changes to be committed:
              (use "git reset HEAD <file>..." to unstage)

                    new file:   .gitignore
                    renamed:    chapter01.txt -> chapter01/chapter1.txt

            Changes not staged for commit:
              (use "git add <file>..." to update what will be committed)
              (use "git checkout -- <file>..." to discard changes in working directory)

                    modified:   .gitignore
                    modified:   chapter02.txt

3.查看提交历史
    克隆一个网上代码项目
    192:GitProjects zhengjun$ git clone git://github.com/schacon/simplegit-progit.git
    Cloning into 'simplegit-progit'...
    remote: Counting objects: 13, done.
    remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 13
    Receiving objects: 100% (13/13), done.
    Resolving deltas: 100% (3/3), done.

    查看其日志
    192:GitProjects zhengjun$ cd simplegit-progit/
    192:simplegit-progit zhengjun$ git log
    commit ca82a6dff817ec66f44342007202690a93763949 (HEAD -> master, origin/master, origin/HEAD)
    Author: Scott Chacon <schacon@gmail.com>
    Date:   Mon Mar 17 21:52:11 2008 -0700

        changed the verison number

    commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 //SHA-1 校验和
    Author: Scott Chacon <schacon@gmail.com>        //作者的名字和电子邮件地址
    Date:   Sat Mar 15 16:40:33 2008 -0700          //提交时间

        removed unnecessary test code               //提交说明

    commit a11bef06a3f659402fe7563abf99ad00de2209e6
    Author: Scott Chacon <schacon@gmail.com>
    Date:   Sat Mar 15 10:31:28 2008 -0700

        first commit


    git log的其他常用选项
    NAME
           git-log - Show commit logs显示提交日志
    SYNOPSIS
           git log [<options>] [<revision range>] [[--] <path>...]
    DESCRIPTION
           Shows the commit logs.
           The command takes options applicable to the git rev-list command to control what is shown and how, and options applicable to the git diff-* commands to control how the changes
           each commit introduces are shown.
    OPTIONS
           --follow
               Continue listing the history of a file beyond renames (works only for a single file).
           --no-decorate, --decorate[=short|full|auto|no]
               Print out the ref names of any commits that are shown. If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is
               specified, the full ref name (including prefix) will be printed. If auto is specified, then if the output is going to a terminal, the ref names are shown as if short were
               given, otherwise no ref names are shown. The default option is short.
           --source
               Print out the ref name given on the command line by which each commit was reached.
           --use-mailmap
               Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See git-shortlog(1).
           --full-diff
               Without this flag, git log -p <path>...  shows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for commits
               that touch the specified paths; this means that "<path>..." limits only commits, and doesn't limit diff for those commits.
               Note that this affects all diff-based output types, e.g. those produced by --stat, etc.
           --log-size
               Include a line "log size <number>" in the output for each commit, where <number> is the length of that commit's message in bytes. Intended to speed up tools that read log
               messages from git log output by allowing them to allocate space in advance.
           -L <start>,<end>:<file>, -L :<funcname>:<file>
               Trace the evolution of the line range given by "<start>,<end>" (or the function name regex <funcname>) within the <file>. You may not give any pathspec limiters. This is
               currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments. You can specify this option more than once.
               <start> and <end> can take one of these forms:
               o   number
                   If <start> or <end> is a number, it specifies an absolute line number (lines count from 1).
               o   /regex/
                   This form will use the first line matching the given POSIX regex. If <start> is a regex, it will search from the end of the previous -L range, if any, otherwise from the
                   start of file. If <start> is "^/regex/", it will search from the start of file. If <end> is a regex, it will search starting at the line given by <start>.
               o   +offset or -offset
                   This is only valid for <end> and will specify a number of lines before or after the line given by <start>.

               If ":<funcname>" is given in place of <start> and <end>, it is a regular expression that denotes the range from the first funcname line that matches <funcname>, up to the
               next funcname line. ":<funcname>" searches from the end of the previous -L range, if any, otherwise from the start of file. "^:<funcname>" searches from the start of file.

        1.追踪特定文件的日志历史 git log --follow chapter02.txt
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log --follow chapter02.txt
                commit cd7cd770dc625a2da57ca94fb84c1a06fa75d107
                Author: 郑军 <zhengjun1987@outlook.com>
                Date:   Sat Jan 20 21:07:52 2018 +0800

                    建立.gitignore文件，忽略相关文件

                commit a7a19bee9cbc78b608d655ca0dde7214e69d82f5
                Author: 郑军 <zhengjun1987@outlook.com>
                Date:   Sat Jan 20 20:28:49 2018 +0800

                    Pro Git chapter02 Basical Operations 2018-01-20 20:28:44

                commit 645119d903be422f9266695df9cdad8465347634
                Author: 郑军 <zhengjun1987@outlook.com>
                Date:   Sat Jan 20 19:08:52 2018 +0800

                    Pro Git chapter01&chapter02 basical operations 2018-01-20 19:08:48

            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log --oneline --follow .gitignore
                5e0a1ae (HEAD -> master) 删除.gitignore文件之后提交
                cd7cd77 建立.gitignore文件，忽略相关文件
                zhengjuns-MacBook-Pro:ProGit zhengjun$

        2.不带HEAD指针之类信息的log（git log --no-decorate）
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log --no-decorate
                commit 5e0a1aecfbb5b95bbd1c8cd13cf6a136fbe588c8
                Author: 郑军 <zhengjun1987@outlook.com>
                Date:   Sat Jan 20 21:18:24 2018 +0800

                    删除.gitignore文件之后提交

        3.常用-p 选项展开显示每次提交的内容差异，用-2 则仅显示最近的两次更新  (代码审查，或者要快速浏览其他协作者提交的更新都作了哪些改动 )
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log -p -1
                commit 5e0a1aecfbb5b95bbd1c8cd13cf6a136fbe588c8 (HEAD -> master)
                Author: 郑军 <zhengjun1987@outlook.com>
                Date:   Sat Jan 20 21:18:24 2018 +0800

                    删除.gitignore文件之后提交

                diff --git a/.gitignore b/.gitignore
                deleted file mode 100644
                index a1c2033..0000000
                --- a/.gitignore
                +++ /dev/null
                @@ -1,4 +0,0 @@
                -.DS_STORE
                -.idea/
                -*.iml
                -cmake-build-debug/
                \ No newline at end of file

        4.--stat，仅显示简要的增改行数统计
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log -2 --stat
                commit 5e0a1aecfbb5b95bbd1c8cd13cf6a136fbe588c8 (HEAD -> master)
                Author: 郑军 <zhengjun1987@outlook.com>
                Date:   Sat Jan 20 21:18:24 2018 +0800

                    删除.gitignore文件之后提交

                 .gitignore | 4 ----
                 1 file changed, 4 deletions(-)

                commit cd7cd770dc625a2da57ca94fb84c1a06fa75d107
                Author: 郑军 <zhengjun1987@outlook.com>
                Date:   Sat Jan 20 21:07:52 2018 +0800

                    建立.gitignore文件，忽略相关文件

                 .gitignore    |  4 ++++
                 chapter02.txt | 10 ++++++++++
                 2 files changed, 14 insertions(+)

            192:simplegit-progit zhengjun$ git log --stat --oneline
                ca82a6d (HEAD -> master, origin/master, origin/HEAD) changed the verison number
                 Rakefile | 2 +-
                 1 file changed, 1 insertion(+), 1 deletion(-)
                085bb3b removed unnecessary test code
                 lib/simplegit.rb | 5 -----
                 1 file changed, 5 deletions(-)
                a11bef0 first commit
                 README           |  6 ++++++
                 Rakefile         | 23 +++++++++++++++++++++++
                 lib/simplegit.rb | 25 +++++++++++++++++++++++++
                 3 files changed, 54 insertions(+)

        5.常用的--pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史
            git log --pretty=oneline
            git log --pretty=short
            git log --pretty=full
            git log --pretty=fuller
            git log --pretty=format:"%h - %an, %ar : %s"
            git log --graph
            git log --oneline --graph

            选项说明
            %H 提交对象（commit）的完整哈希字串
            %h 提交对象的简短哈希字串
            %T 树对象（tree）的完整哈希字串
            %t 树对象的简短哈希字串
            %P 父对象（parent）的完整哈希字串
            %p 父对象的简短哈希字串
            %an 作者（author）的名字
            %ae 作者的电子邮件地址
            %ad 作者修订日期（可以用 -date= 选项定制格式）
            %ar 作者修订日期，按多久以前的方式显示
            %cn 提交者(committer)的名字
            %ce 提交者的电子邮件地址
            %cd 提交日期
            %cr 提交日期，按多久以前的方式显示
            %s 提交说明

            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log --pretty=oneline
                5e0a1aecfbb5b95bbd1c8cd13cf6a136fbe588c8 (HEAD -> master) 删除.gitignore文件之后提交
                cd7cd770dc625a2da57ca94fb84c1a06fa75d107 建立.gitignore文件，忽略相关文件
                7ed76eef251b90e717925c1410f1bce694e66a58 Merge branch 'master' of https://github.com/zhengjun1987hz/ProGit
                a7a19bee9cbc78b608d655ca0dde7214e69d82f5 Pro Git chapter02 Basical Operations 2018-01-20 20:28:44
                56e7d038d92c3ddba28840b3b586e6b3b2465ddc Initial commit
                645119d903be422f9266695df9cdad8465347634 Pro Git chapter01&chapter02 basical operations 2018-01-20 19:08:48
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log --pretty=format:"%h - %an, %ar : %s"
                5e0a1ae - 郑军, 4 hours ago : 删除.gitignore文件之后提交
                cd7cd77 - 郑军, 4 hours ago : 建立.gitignore文件，忽略相关文件
                7ed76ee - 郑军, 4 hours ago : Merge branch 'master' of https://github.com/zhengjun1987hz/ProGit
                a7a19be - 郑军, 4 hours ago : Pro Git chapter02 Basical Operations 2018-01-20 20:28:44
                56e7d03 - 郑军, 5 hours ago : Initial commit
                645119d - 郑军, 6 hours ago : Pro Git chapter01&chapter02 basical operations 2018-01-20 19:08:48

            -p 按补丁格式显示每个更新之间的差异。
            --stat 显示每次更新的文件修改统计信息。
            --shortstat 只显示--stat 中最后的行数修改添加移除统计。
            --name-only 仅在提交信息后显示已修改的文件清单。
            --name-status 显示新增、修改、删除的文件清单。
            --abbrev-commit 仅显示SHA-1 的前几个字符，而非所有的40 个字符。
            --relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。
            --graph 显示ASCII 图形表示的分支合并历史。
            --pretty 使用其他格式显示历史提交信息。可用的选项包括oneline，short，full，fuller 和format

        6.限制输出长度
            -<n> 选项的写法，其中的n 可以是任何自然数，表示仅显示最近的若干条提交。
            按照时间作限制的选项，比如--since 和--until
            --author 选项显示指定作者的提交
            --grep 选项搜索提交说明中的关键字
            --all-match 选项用于要得到同时满足以上两个选项搜索条件

            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log --since=5.hours --oneline  --follow chapter02.txt
                cd7cd77 建立.gitignore文件，忽略相关文件
                a7a19be Pro Git chapter02 Basical Operations 2018-01-20 20:28:44

            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log --author 郑军 --grep "文件" --all-match --oneline
                5e0a1ae (HEAD -> master) 删除.gitignore文件之后提交
                cd7cd77 建立.gitignore文件，忽略相关文件

4.撤消操作
        1.修改最后一次提交
            git commit --amend  此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命
                                令的话，相当于有机会重新编辑提交说明

            zhengjuns-MacBook-Pro:ProGit zhengjun$ git commit -a -m "挪动文件 待修补操作 2018-01-21 01:28:45"
                [master b7235ca] 挪动文件 待修补操作 2018-01-21 01:28:45
                 3 files changed, 343 insertions(+), 1 deletion(-)
                 create mode 100644 .gitignore
                 rename chapter01.txt => chapter01/chapter1.txt (100%)
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git mv chapter01/chapter1.txt chapter01.txt
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git commit --amend -a -m "撤销操作 将文件移回原来位置 2018-01-21 01:30:32"
                [master 1d33d24] 撤销操作 将文件移回原来位置 2018-01-21 01:30:32
                 Date: Sun Jan 21 01:28:48 2018 +0800
                 2 files changed, 343 insertions(+), 1 deletion(-)
                 create mode 100644 .gitignore
            zhengjuns-MacBook-Pro:ProGit zhengjun$ git log -3 --oneline
                1d33d24 (HEAD -> master) 撤销操作 将文件移回原来位置 2018-01-21 01:30:32
                5e0a1ae 删除.gitignore文件之后提交
                cd7cd77 建立.gitignore文件，忽略相关文件

            如上所示，第一次提交之后的散列值为b7235ca，然后发现文件位置错误，进行修复之后立即git commit --amend提交一次，散列值1d33d24
            操作成功后再查询日志，带有错误的提交的散列值已经被覆盖掉，只留下修正后的提交记录

        2.取消已经暂存的文件
            git reset HEAD <file>... 取消暂存

        3.取消对文件的修改（相当于IDE里面的Revert回滚操作）
            git checkout -- <file>  抛弃文件修改

5.远程仓库的使用
    远程仓库：托管在网络上的项目仓库，可能会有好多个，其中有些你只能读，另外有些可以写。
    远程仓库管理操作：添加远程库，移除废弃的远程库，管理各式远程库分支，定义是否跟踪这些分支，等等

    1.查看当前的远程库
        git remote 命令，它会列出每个远程库的简短名字,加上-v 选项（译注：此为--verbose 的简写，取首字母），显示对应的克隆地址
        192:simplegit-progit zhengjun$ git remote -v
        origin	git://github.com/schacon/simplegit-progit.git (fetch)
        origin	git://github.com/schacon/simplegit-progit.git (push)

    2.添加远程仓库
        git remote add [shortname] [url]    添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用

        zhengjuns-MacBook-Pro:ProGit zhengjun$ git remote -v
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git remote add origin https://github.com/zhengjun1987hz/ProGit.git
        zhengjuns-MacBook-Pro:ProGit zhengjun$ git remote -v
        origin  https://github.com/zhengjun1987hz/ProGit.git (fetch)
        origin  https://github.com/zhengjun1987hz/ProGit.git (push)
        第一次查询远程仓库结果为空，没有显示结果
        执行remote add 操作之后再查已经成功添加



